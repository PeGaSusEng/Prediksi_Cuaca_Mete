{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Nama : La Ode Muhammad Abin Akbar\n",
    "# Nim : 12821037\n",
    "\n",
    "#Import Perpustakaan\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import cartopy as crt\n",
    "import xarray as xr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import Data CH Bulanan dari GPCC_INA.dat\n",
    "data=np.fromfile('D:\\\\Python\\\\GPCC_INA.dat', dtype=np.float32)\n",
    "\n",
    "#reshape (ntime,nlat,nlon)\n",
    "data=np.reshape(data,(768,41,101))\n",
    "\n",
    "#lon, lat,time\n",
    "lon=np.linspace(start=94.75,stop=94.75+100*0.5,num=101)\n",
    "lat=np.linspace(start=-10.25,stop=-10.25+40*0.5,num=41)\n",
    "time=pd.date_range(start='1950',periods=768,freq='MS')\n",
    "\n",
    "#data array\n",
    "dataPr=xr.DataArray(data,\n",
    "                    dims=(\"time\",\"lat\",\"lon\"),\n",
    "                    coords={\"time\":time,\"lat\":lat,\"lon\":lon})\n",
    "dataPr=dataPr.where(dataPr>=0)\n",
    "#dataPr yang dipotong berdasarkan \"waktu\"\n",
    "dataPr = dataPr.sel(time=slice('1950-01-01','2000-12-01'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Data CH Bulanan dari GPCC_INA.dat yang dicut \n",
    "k1 = dataPr.mean(dim=['lat','lon'])\n",
    "#Data CH Bulanan yang diambil selama 30 tahun\n",
    "k1_sel = k1.sel(time=slice('1950-01-01','2000-12-01'))\n",
    "#Data CH Bulanan yang diubah menjadi Numpy\n",
    "np_k1 = k1_sel.to_numpy()\n",
    "#Data yang udah menjadi Array\n",
    "np_k1.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import data indeks mei sebagai kejadian ENSO dari CLIM_INDEX.txt\n",
    "data2 = pd.read_csv('CLIM_INDEX.csv')\n",
    "#reshape\n",
    "data2.shape\n",
    "(data2.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ubah data CSV pada CLIM_INDEX.txt menjadi Array atau Matriks\n",
    "arr=[]\n",
    "arr= np.loadtxt('CLIM_INDEX.csv',delimiter=',',dtype=str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menentukan Indeks SOI\n",
    "tsSOI=arr[1:613,2]\n",
    "tsSOI[0:]\n",
    "len(tsSOI) #Banyak Data Dari TsSOI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menetukan Indeks DMI\n",
    "tsDMI = arr[1:613,4]\n",
    "tsDMI[0:]\n",
    "len(tsDMI) #Banyak data dari tsDMI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menghitung Indeks Curah Hujan\n",
    "tsCH=np_k1[1:]\n",
    "tsCH[0:]\n",
    "len(tsCH) #Banyak data dari tsCH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menghitung rata-rata klimatologi\n",
    "\n",
    "#indeks SOI 1950-2000\n",
    "soi1=data2['SOI'].loc[0 :611]\n",
    "\n",
    "#indeks DMI 1950-2000\n",
    "dmi2=data2['DMI'].loc[0 : 611]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menghitung rata - rata klimatologi\n",
    "klimPr=dataPr.groupby('time.month').mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Anomali untuk El-Nino dan La - Nina\n",
    "AN=klimPr+0.15*klimPr\n",
    "BN=klimPr-0.15*klimPr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Untuk El - nino\n",
    "AnomAN=dataPr.groupby('time.month')-AN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Untuk La - nina\n",
    "AnomBN=dataPr.groupby('time.month')-BN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "soi_musim=xr.DataArray(soi1,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "dmi_musim=xr.DataArray(dmi2,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Untuk Kasus La Nina\n",
    "\n",
    "#ambil data seluruh periode waktu\n",
    "AnomAN_seluruh_LN=AnomAN\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_seluruh_LN=(AnomAN_seluruh_LN>0)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "AnomAN_musim=AnomAN.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON (Bulan September-Oktober-November)\n",
    "AnomAN_musim_LN_SON=AnomAN_musim['SON']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_LN_SON=(AnomAN_musim_LN_SON>0)*1\n",
    "\n",
    "#ambil hanya musim DJF (Bulan Desember-Januari-Februari)\n",
    "AnomAN_musim_LN_DJF=AnomAN_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_LN_DJF=(AnomAN_musim_LN_DJF>0)*1\n",
    "\n",
    "#ambil hanya musim MAM (Bulan Maret-April-Mei)\n",
    "AnomAN_musim_LN_MAM=AnomAN_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_LN_MAM=(AnomAN_musim_LN_MAM>0)*1\n",
    "\n",
    "#ambil hanya musim JJA (Bulan Juni-Juli-Agustus)\n",
    "AnomAN_musim_LN_JJA=AnomAN_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_LN_JJA=(AnomAN_musim_LN_JJA>0)*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "soi_musim=xr.DataArray(soi1,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "dmi_musim=xr.DataArray(dmi2,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Untuk Kasus El Nino\n",
    "#Kasus El Nino\n",
    "\n",
    "#ambil data seluruh periode waktu\n",
    "AnomBN_seluruh_EN=AnomBN\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_seluruh_EN=(AnomBN_seluruh_EN<0)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "AnomBN_musim=AnomBN.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON (Bulan September-Oktober-November)\n",
    "AnomBN_musim_EN_SON=AnomBN_musim['SON']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_EN_SON=(AnomBN_musim_EN_SON<0)*1\n",
    "\n",
    "#ambil hanya musim DJF (Bulan Desember-Januari-Februari)\n",
    "AnomBN_musim_EN_DJF=AnomBN_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_EN_DJF=(AnomBN_musim_EN_DJF<0)*1\n",
    "\n",
    "#ambil hanya musim MAM (Bulan Maret-April-Mei)\n",
    "AnomBN_musim_EN_MAM=AnomBN_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_EN_MAM=(AnomBN_musim_EN_MAM<0)*1\n",
    "\n",
    "#ambil hanya musim JJA (Bulan Juni-Juli-Agustus)\n",
    "AnomBN_musim_EN_JJA=AnomBN_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_EN_JJA=(AnomBN_musim_EN_JJA<0)*1\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD+\n",
    "\n",
    "#ambil data seluruh periode waktu\n",
    "AnomBN_seluruh_IOD_Positif=AnomBN\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_seluruh_IOD_Positif=(AnomBN_seluruh_IOD_Positif<0)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "AnomBN_musim=AnomBN.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON (Bulan September-Oktober-November)\n",
    "AnomBN_musim_IOD_Positif_SON=AnomBN_musim['SON']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_IOD_Positif_SON=(AnomBN_musim_IOD_Positif_SON<0)*1\n",
    "\n",
    "#ambil hanya musim DJF (Bulan Desember-Januari-Februari)\n",
    "AnomBN_musim_IOD_Positif_DJF=AnomBN_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_IOD_Positif_DJF=(AnomBN_musim_IOD_Positif_DJF<0)*1\n",
    "\n",
    "#ambil hanya musim MAM (Bulan Maret-April-Mei)\n",
    "AnomBN_musim_IOD_Positif_MAM=AnomBN_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_IOD_Positif_MAM=(AnomBN_musim_IOD_Positif_MAM<0)*1\n",
    "\n",
    "#ambil hanya musim JJA (Bulan Juni-Juli-Agustus)\n",
    "AnomBN_musim_IOD_Positif_JJA=AnomBN_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya CH di bawah normal, 0 artinya CH tidak di bawah normal\n",
    "AnomBN_musim_IOD_Positif_JJA=(AnomBN_musim_IOD_Positif_JJA<0)*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD-\n",
    "\n",
    "#ambil data seluruh periode waktu\n",
    "AnomAN_seluruh_IOD_Negatif=AnomAN\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_seluruh_IOD_Negatif=(AnomAN_seluruh_IOD_Negatif>0)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "AnomAN_musim=AnomAN.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON (Bulan September-Oktober-November)\n",
    "AnomAN_musim_IOD_Negatif_SON=AnomAN_musim['SON']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_IOD_Negatif_SON=(AnomAN_musim_IOD_Negatif_SON>0)*1\n",
    "\n",
    "#ambil hanya musim DJF (Bulan Desember-Januari-Februari)\n",
    "AnomAN_musim_IOD_Negatif_DJF=AnomAN_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_IOD_Negatif_DJF=(AnomAN_musim_IOD_Negatif_DJF>0)*1\n",
    "\n",
    "#ambil hanya musim MAM (Bulan Maret-April-Mei)\n",
    "AnomAN_musim_IOD_Negatif_MAM=AnomAN_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_IOD_Negatif_MAM=(AnomAN_musim_IOD_Negatif_MAM>0)*1\n",
    "\n",
    "#ambil hanya musim JJA (Bulan Juni-Juli-Agustus)\n",
    "AnomAN_musim_IOD_Negatif_JJA=AnomAN_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya CH di atas normal, 0 artinya CH tidak di atas normal\n",
    "AnomAN_musim_IOD_Negatif_JJA=(AnomAN_musim_IOD_Negatif_JJA>0)*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "soi_musim=xr.DataArray(soi1,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "dmi_musim=xr.DataArray(dmi2,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ambang batas indeks SOI\n",
    "thold_LN=1.0\n",
    "thold_EN=-1.0\n",
    "\n",
    "#Kasus La Nina\n",
    "#Seluruh periode waktu\n",
    "soi_seluruh_LN=soi1.to_xarray()\n",
    "\n",
    "#ubah ke logical array: 1 artinya kejadian La-Nina, 0 artinya bukan kejadian La Nina (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_seluruh_LN=(soi_seluruh_LN>=thold_LN)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "soi_musim=soi_musim.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON\n",
    "soi_musim_LN_SON=soi_musim['SON']\n",
    "#ubah ke logical array: 1 artinya kejadian La-Nina, 0 artinya bukan kejadian La Nina (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_LN_SON=(soi_musim_LN_SON>=thold_LN)*1\n",
    "\n",
    "#ambil hanya musim DJF\n",
    "soi_musim_LN_DJF=soi_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya kejadian La-Nina, 0 artinya bukan kejadian La Nina (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_LN_DJF=(soi_musim_LN_DJF>=thold_LN)*1\n",
    "\n",
    "#ambil hanya musim MAM\n",
    "soi_musim_LN_MAM=soi_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya kejadian La-Nina, 0 artinya bukan kejadian La Nina (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_LN_MAM=(soi_musim_LN_MAM>=thold_LN)*1\n",
    "\n",
    "#ambil hanya musim JJA\n",
    "soi_musim_LN_JJA=soi_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya kejadian La-Nina, 0 artinya bukan kejadian La Nina (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_LN_JJA=(soi_musim_LN_JJA>=thold_LN)*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#soi1.to_xarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "soi_musim=xr.DataArray(soi1,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "dmi_musim=xr.DataArray(dmi2,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ambang batas indeks SOI\n",
    "thold_LN=1.0\n",
    "thold_EN=-1.0\n",
    "\n",
    "#Kasus El Nino\n",
    "#Seluruh periode waktu\n",
    "soi_seluruh_EN=soi1.to_xarray()\n",
    "\n",
    "#ubah ke logical array: 1 artinya kejadian El-Nino, 0 artinya bukan kejadian El-Nino (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_seluruh_EN=(soi_seluruh_EN<=thold_EN)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "soi_musim=soi_musim.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON\n",
    "soi_musim_EN_SON=soi_musim['SON']\n",
    "#ubah ke logical array: 1 artinya kejadian El-Nino, 0 artinya bukan kejadian El-Nino (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_EN_SON=(soi_musim_EN_SON<=thold_EN)*1\n",
    "\n",
    "#ambil hanya musim DJF\n",
    "soi_musim_EN_DJF=soi_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya kejadian El-Nino, 0 artinya bukan kejadian El-Nino (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_EN_DJF=(soi_musim_EN_DJF<=thold_EN)*1\n",
    "\n",
    "#ambil hanya musim MAM\n",
    "soi_musim_EN_MAM=soi_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya kejadian El-Nino, 0 artinya bukan kejadian El-Nino (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_EN_MAM=(soi_musim_EN_MAM<=thold_EN)*1\n",
    "\n",
    "#ambil hanya musim JJA\n",
    "soi_musim_EN_JJA=soi_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya kejadian El-Nino, 0 artinya bukan kejadian El-Nino (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "soi_musim_EN_JJA=(soi_musim_EN_JJA<=thold_EN)*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "dmi_musim=xr.DataArray(dmi2,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ambang batas indeks DMI\n",
    "thold_IOD_Negatif=-0.4\n",
    "thold_IOD_Positif=0.4\n",
    "\n",
    "#Kasus IOD+\n",
    "#Seluruh periode waktu\n",
    "dmi_seluruh_IOD_Positif=dmi2.to_xarray()\n",
    "\n",
    "#ubah ke logical array: 1 artinya kejadian IOD+, 0 artinya bukan kejadian IOD+ (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_seluruh_IOD_Positif=(dmi_seluruh_IOD_Positif>=thold_IOD_Positif)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "dmi_musim=dmi_musim.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON\n",
    "dmi_musim_IOD_Positif_SON=dmi_musim['SON']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD+, 0 artinya bukan kejadian IOD+ (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Positif_SON=(dmi_musim_IOD_Positif_SON>=thold_IOD_Positif)*1\n",
    "\n",
    "#ambil hanya musim DJF\n",
    "dmi_musim_IOD_Positif_DJF=dmi_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD+, 0 artinya bukan kejadian IOD+ (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Positif_DJF=(dmi_musim_IOD_Positif_DJF>=thold_IOD_Positif)*1\n",
    "\n",
    "#ambil hanya musim MAM\n",
    "dmi_musim_IOD_Positif_MAM=dmi_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD+, 0 artinya bukan kejadian IOD+ (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Positif_MAM=(dmi_musim_IOD_Positif_MAM>=thold_IOD_Positif)*1\n",
    "\n",
    "#ambil hanya musim JJA\n",
    "dmi_musim_IOD_Positif_JJA=dmi_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD+, 0 artinya bukan kejadian IOD+ (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Positif_JJA=(dmi_musim_IOD_Positif_JJA>=thold_IOD_Positif)*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time=pd.date_range(start='1950',periods=612,freq='MS')\n",
    "\n",
    "#data array\n",
    "dmi_musim=xr.DataArray(dmi2,\n",
    "                    dims=(\"time\"),\n",
    "                    coords={\"time\":time})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ambang batas indeks DMI\n",
    "thold_IOD_Negatif=-0.4\n",
    "thold_IOD_Positif=0.4\n",
    "\n",
    "#Kasus IOD-\n",
    "#Seluruh periode waktu\n",
    "dmi_seluruh_IOD_Negatif=dmi2.to_xarray()\n",
    "\n",
    "#ubah ke logical array: 1 artinya kejadian IOD-, 0 artinya bukan kejadian IOD- (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_seluruh_IOD_Negatif=(dmi_seluruh_IOD_Negatif<=thold_IOD_Negatif)*1\n",
    "\n",
    "#memisahkan per musim\n",
    "dmi_musim=dmi_musim.groupby('time.season')\n",
    "\n",
    "#ambil hanya musim SON\n",
    "dmi_musim_IOD_Negatif_SON=dmi_musim['SON']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD-, 0 artinya bukan kejadian IOD- (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Negatif_SON=(dmi_musim_IOD_Negatif_SON<=thold_IOD_Negatif)*1\n",
    "\n",
    "#ambil hanya musim DJF\n",
    "dmi_musim_IOD_Negatif_DJF=dmi_musim['DJF']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD-, 0 artinya bukan kejadian IOD- (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Negatif_DJF=(dmi_musim_IOD_Negatif_DJF<=thold_IOD_Negatif)*1\n",
    "\n",
    "#ambil hanya musim MAM\n",
    "dmi_musim_IOD_Negatif_MAM=dmi_musim['MAM']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD-, 0 artinya bukan kejadian IOD- (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Negatif_MAM=(dmi_musim_IOD_Negatif_MAM<=thold_IOD_Negatif)*1\n",
    "\n",
    "#ambil hanya musim JJA\n",
    "dmi_musim_IOD_Negatif_JJA=dmi_musim['JJA']\n",
    "#ubah ke logical array: 1 artinya kejadian IOD-, 0 artinya bukan kejadian IOD- (berdasarkan ambang batas yg ditentukan sebelumnya)\n",
    "dmi_musim_IOD_Negatif_JJA=(dmi_musim_IOD_Negatif_JJA<=thold_IOD_Negatif)*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menghitung Probabilitas Bersyarat\n",
    "#La Nina Seluruh Periode Waktu\n",
    "prob_seluruh_LN=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_seluruh_LN=AnomAN_seluruh_LN[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_seluruh_LN[j,i]=np.sum((ts_seluruh_LN.values & soi_seluruh_LN.values))/np.sum(soi_seluruh_LN.values)\n",
    "\n",
    "#La Nina Bulan SON\n",
    "prob_LN_SON=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_LN_SON=AnomAN_musim_LN_SON[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_LN_SON[j,i]=np.sum((ts_LN_SON.values & soi_musim_LN_SON.values))/np.sum(soi_musim_LN_SON.values)\n",
    "    \n",
    "#La Nina Bulan DJF\n",
    "prob_LN_DJF=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_LN_DJF=AnomAN_musim_LN_DJF[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_LN_DJF[j,i]=np.sum((ts_LN_DJF.values & soi_musim_LN_DJF.values))/np.sum(soi_musim_LN_DJF.values)\n",
    "    \n",
    "#La Nina Bulan MAM\n",
    "prob_LN_MAM=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_LN_MAM=AnomAN_musim_LN_MAM[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_LN_MAM[j,i]=np.sum((ts_LN_MAM.values & soi_musim_LN_MAM.values))/np.sum(soi_musim_LN_MAM.values)\n",
    "    \n",
    "#La Nina Bulan JJA\n",
    "prob_LN_JJA=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_LN_JJA=AnomAN_musim_LN_JJA[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_LN_JJA[j,i]=np.sum((ts_LN_JJA.values & soi_musim_LN_JJA.values))/np.sum(soi_musim_LN_JJA.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menghitung Probabilitas Bersyarat\n",
    "\n",
    "#El Nino Seluruh Periode Waktu\n",
    "prob_seluruh_EN=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_seluruh_EN=AnomBN_seluruh_EN[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_seluruh_EN[j,i]=np.sum((ts_seluruh_EN.values & soi_seluruh_EN.values))/np.sum(soi_seluruh_EN.values)\n",
    "\n",
    "#El Nino Bulan SON\n",
    "prob_EN_SON=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_EN_SON=AnomBN_musim_EN_SON[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_EN_SON[j,i]=np.sum((ts_EN_SON.values & soi_musim_EN_SON.values))/np.sum(soi_musim_EN_SON.values)\n",
    "    \n",
    "#El Nino Bulan DJF\n",
    "prob_EN_DJF=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_EN_DJF=AnomBN_musim_EN_DJF[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_EN_DJF[j,i]=np.sum((ts_EN_DJF.values & soi_musim_EN_DJF.values))/np.sum(soi_musim_EN_DJF.values)\n",
    "    \n",
    "#El Nino Bulan MAM\n",
    "prob_EN_MAM=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_EN_MAM=AnomBN_musim_EN_MAM[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_EN_MAM[j,i]=np.sum((ts_EN_MAM.values & soi_musim_EN_MAM.values))/np.sum(soi_musim_EN_MAM.values)\n",
    "    \n",
    "#El Nino Bulan JJA\n",
    "prob_EN_JJA=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_EN_JJA=AnomBN_musim_EN_JJA[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_EN_JJA[j,i]=np.sum((ts_EN_JJA.values & soi_musim_EN_JJA.values))/np.sum(soi_musim_EN_JJA.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menghitung Probabilitas Bersyarat\n",
    "\n",
    "#IOD+ Seluruh Periode Waktu\n",
    "prob_seluruh_IOD_Positif=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_seluruh_IOD_Positif=AnomBN_seluruh_IOD_Positif[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_seluruh_IOD_Positif[j,i]=np.sum((ts_seluruh_IOD_Positif.values & dmi_seluruh_IOD_Positif.values))/np.sum(dmi_seluruh_IOD_Positif.values)\n",
    "\n",
    "#IOD+ Bulan SON\n",
    "prob_IOD_Positif_SON=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Positif_SON=AnomBN_musim_IOD_Positif_SON[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Positif_SON[j,i]=np.sum((ts_IOD_Positif_SON.values & dmi_musim_IOD_Positif_SON.values))/np.sum(dmi_musim_IOD_Positif_SON.values)\n",
    "    \n",
    "#IOD+ Bulan DJF\n",
    "prob_IOD_Positif_DJF=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Positif_DJF=AnomBN_musim_IOD_Positif_DJF[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Positif_DJF[j,i]=np.sum((ts_IOD_Positif_DJF.values & dmi_musim_IOD_Positif_DJF.values))/np.sum(dmi_musim_IOD_Positif_DJF.values)\n",
    "    \n",
    "#IOD+ Bulan MAM\n",
    "prob_IOD_Positif_MAM=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Positif_MAM=AnomBN_musim_IOD_Positif_MAM[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Positif_MAM[j,i]=np.sum((ts_IOD_Positif_MAM.values & dmi_musim_IOD_Positif_MAM.values))/np.sum(dmi_musim_IOD_Positif_MAM.values)\n",
    "    \n",
    "#IOD+ Bulan JJA\n",
    "prob_IOD_Positif_JJA=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Positif_JJA=AnomBN_musim_IOD_Positif_JJA[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Positif_JJA[j,i]=np.sum((ts_IOD_Positif_JJA.values & dmi_musim_IOD_Positif_JJA.values))/np.sum(dmi_musim_IOD_Positif_JJA.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Menghitung Probabilitas Bersyarat\n",
    "\n",
    "#IOD- Seluruh Periode Waktu\n",
    "prob_seluruh_IOD_Negatif=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_seluruh_IOD_Negatif=AnomAN_seluruh_IOD_Negatif[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_seluruh_IOD_Negatif[j,i]=np.sum((ts_seluruh_IOD_Negatif.values & dmi_seluruh_IOD_Negatif.values))/np.sum(dmi_seluruh_IOD_Negatif.values)\n",
    "\n",
    "#IOD- Bulan SON\n",
    "prob_IOD_Negatif_SON=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Negatif_SON=AnomAN_musim_IOD_Negatif_SON[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Negatif_SON[j,i]=np.sum((ts_IOD_Negatif_SON.values & dmi_musim_IOD_Negatif_SON.values))/np.sum(dmi_musim_IOD_Negatif_SON.values)\n",
    "    \n",
    "#IOD- Bulan DJF\n",
    "prob_IOD_Negatif_DJF=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Negatif_DJF=AnomAN_musim_IOD_Negatif_DJF[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Negatif_DJF[j,i]=np.sum((ts_IOD_Negatif_DJF.values & dmi_musim_IOD_Negatif_DJF.values))/np.sum(dmi_musim_IOD_Negatif_DJF.values)\n",
    "    \n",
    "#IOD- Bulan MAM\n",
    "prob_IOD_Negatif_MAM=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Negatif_MAM=AnomAN_musim_IOD_Negatif_MAM[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Negatif_MAM[j,i]=np.sum((ts_IOD_Negatif_MAM.values & dmi_musim_IOD_Negatif_MAM.values))/np.sum(dmi_musim_IOD_Negatif_MAM.values)\n",
    "    \n",
    "#IOD- Bulan JJA\n",
    "prob_IOD_Negatif_JJA=dataPr[0,...].copy()\n",
    "nt,ny,nx=dataPr.shape\n",
    "for j in range(ny):\n",
    "  for i in range(nx):\n",
    "    if ~np.isnan(dataPr[0,j,i]):\n",
    "      ts_IOD_Negatif_JJA=AnomAN_musim_IOD_Negatif_JJA[:,j,i]\n",
    "      #menghitung conditional probability\n",
    "      prob_IOD_Negatif_JJA[j,i]=np.sum((ts_IOD_Negatif_JJA.values & dmi_musim_IOD_Negatif_JJA.values))/np.sum(dmi_musim_IOD_Negatif_JJA.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#untuk setting tickmark dari gambar\n",
    "import matplotlib.ticker as mticker \n",
    "#menghilangkan pesan warning yang tidak esensial\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gambar Peta untuk Kasus La Nina\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p  = prob_seluruh_LN.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika La-Nina di SON',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus La Nina DJF\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_LN_DJF.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika La-Nina di DJF',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus La Nina MAM\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_LN_MAM.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika La-Nina di MAM',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus La Nina JJA\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_LN_JJA.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika La-Nina di JJA',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus La Nina Seluruh Periode Waktu\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_seluruh_LN.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika La-Nina di Seluruh Periode Waktu',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus El Nino Seluruh Periode Waktu\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_seluruh_EN.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika El-Nino di Seluruh Periode Waktu',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus El Nino DJF\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_EN_DJF.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika El-Nino di DJF',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus El Nino MAM\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_EN_MAM.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika El-Nino di MAM',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus El Nino JJA\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_EN_JJA.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika El-Nino di JJA',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus El Nino SON\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_EN_SON.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika El-Nino di SON',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD+ Seluruh Periode Waktu\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_seluruh_IOD_Positif.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika IOD+ di Seluruh Periode Waktu',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD+ DJF\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Positif_DJF.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika IOD+ di DJF',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD+ MAM\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Positif_MAM.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika IOD+ di MAM',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD+ JJA\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Positif_JJA.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika IOD+ di JJA',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD+ SON\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Positif_SON.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH BN ketika IOD+ di SON',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD- Seluruh Periode Waktu\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_seluruh_IOD_Negatif.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika IOD- di Seluruh Periode Waktu',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD- DJF\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Negatif_DJF.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika IOD- di DJF',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD- MAM\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Negatif_MAM.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika IOD- di MAM',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD- JJA\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Negatif_JJA.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika IOD- di JJA',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Kasus IOD- SON\n",
    "\n",
    "#proyeksi peta\n",
    "proj=crt.crs.PlateCarree()\n",
    "#figure dan axis\n",
    "fig = plt.figure(figsize=(16,8))\n",
    "ax  = plt.axes(projection=proj)\n",
    "#plot dataarray\n",
    "p   = prob_IOD_Negatif_SON.plot(ax=ax, #axis yang digunakan\n",
    "                transform=proj, #transformasi data ke proyeksi peta\n",
    "                levels=np.arange(0.0,1.0,0.1), #contour level\n",
    "                cmap='jet', #colormap\n",
    "                cbar_kwargs={'orientation':'horizontal', 'shrink': 0.9}, #setting colorbar\n",
    "                )\n",
    "#fitur tambahan\n",
    "ax.set_title('Probabilitas CH AN ketika IOD- di SON',fontsize=20,fontweight='bold') #judul\n",
    "ax.coastlines(resolution='10m',linewidth=2,edgecolor='black') #garis pantai\n",
    "ocean = crt.feature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=crt.feature.COLORS['water']) #laut\n",
    "ax.add_feature(ocean, linewidth=0.2 )\n",
    "#set area gambar\n",
    "ax.set_extent([lon[0],lon[-1],lat[0],lat[-1]]) \n",
    "#set gridline dan label peta\n",
    "gl=p.axes.gridlines(draw_labels=True,linestyle=':',linewidth=2,color='gray')\n",
    "gl.xlocator = mticker.FixedLocator([100,110,120,130,140])\n",
    "gl.ylocator = mticker.FixedLocator([-8,-4,0,4,8])\n",
    "gl.xlabels_top=False\n",
    "gl.xlabels_bottom=True\n",
    "gl.ylabels_right=False\n",
    "gl.ylabels_left=True\n",
    "gl.xlabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "gl.ylabel_style = {'size': 20, 'color': 'black','weight':'bold'}\n",
    "#setting colorbar tambahan\n",
    "p.colorbar.ax.tick_params(labelsize=20)\n",
    "p.colorbar.set_label(label='Probabilitas', size=20, weight='bold')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
